# Generated by Django 2.2.5 on 2019-09-17 17:20

import django.contrib.postgres.fields.citext
from django.db import migrations, models
from django.contrib.postgres.operations import CITextExtension
import django.utils.timezone
import documentcloud.core.fields
import documentcloud.users.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        CITextExtension(),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text="Unique ID to link users across MuckRock's sites", unique=True, verbose_name='UUID')),
                ('name', models.CharField(help_text="The user's full name", max_length=255, verbose_name='full name')),
                ('email', django.contrib.postgres.fields.citext.CIEmailField(help_text="The user's primary email address", max_length=254, null=True, unique=True, verbose_name='email')),
                ('username', django.contrib.postgres.fields.citext.CICharField(help_text='A unique public identifier for the user', max_length=150, unique=True, verbose_name='username')),
                ('avatar_url', models.URLField(blank=True, help_text='A URL which points to an avatar for the user', max_length=255, verbose_name='avatar url')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email_failed', models.BooleanField(default=False, help_text="Has an email we sent to this user's email address failed?", verbose_name='email failed')),
                ('email_verified', models.BooleanField(default=False, help_text="Has this user's email address been verified?", verbose_name='email verified')),
                ('created_at', documentcloud.core.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, help_text='Timestamp of when the user was created', verbose_name='created at')),
                ('updated_at', documentcloud.core.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, help_text='Timestamp of when the user was last updated', verbose_name='updated at')),
                ('use_autologin', models.BooleanField(default=True, help_text='Links you receive in emails from us will contain a token to automatically log you in', verbose_name='use autologin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', documentcloud.users.managers.UserManager()),
            ],
        ),
    ]
