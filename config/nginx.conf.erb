daemon off;
#Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
    use epoll;
    accept_mutex on;
    worker_connections 1024;
}

http {

    map_hash_bucket_size <%= ENV.fetch("NGINX_HASH_BUCKET_SIZE", 64) %>;

    gzip on;
    gzip_http_version 1.0;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types application/rss+xml text/html;

    server_tokens off;

    real_ip_header X-Forwarded-For;
    set_real_ip_from 10.0.0.0/8;
    real_ip_recursive on;

    # Cloudflare IPs
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2c0f:f248::/32;
    set_real_ip_from 2a06:98c0::/29;

    <% ENV.fetch('DENY_IPS', '').split(',').each do |ip| %>
        deny <%= ip %>;
    <% end %>
    <% if ENV.key?('ALLOW_IPS') %>
        <% ENV['ALLOW_IPS'].split(',').each do |entry| %>
            <% ip, comment = entry.split(':') %>
            allow <%= ip %>;
        <% end %>
        deny all;
    <% end %>
    # include block_nobis.conf;

    geo $whitelist {
        default 0;
        <% ENV.fetch('NO_LIMIT_IPS', '').split(',').each do |ip| %>
            <%= ip %> 1;
        <% end %>
    }

    map "$whitelist:$http_x_bypass_rate_limit" $limit_key {
        # default is to limit by ip address
        default $binary_remote_addr;
        # on the whitelist, do not rate limit
        "~^1:" "";
        <% if ENV.key?('BYPASS_RATE_LIMIT_SECRET') %>
            # passed the secret in the header, do not rate limit
            "0:<%= ENV['BYPASS_RATE_LIMIT_SECRET'] %>" "";
        <% end %>
    }

    limit_req_zone $limit_key zone=one:10m rate=10r/s;

    log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
    log_format compression '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $bytes_sent '
                           '"$http_referer" "$http_user_agent" "$gzip_ratio" "$http_x_forwarded_for"';
    access_log logs/nginx/access.log compression;
    error_log logs/nginx/error.log;

    include mime.types;
    default_type application/octet-stream;
    sendfile on;

    #Must read the body in 5 seconds.
    client_body_timeout 5;
    client_max_body_size 4G;

    upstream app_server {
        server unix:/tmp/nginx.socket fail_timeout=0;
     }

    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Host $server_name;

    # CORs settings
    map $http_origin $cors_origin_header {
        default "";
        "<%= ENV["DOCCLOUD_URL"] %>" "$http_origin";
        <% if ENV["DOCCLOUD_URL"] != ENV["DOCCLOUD_EMBED_URL"] %>
          "<%= ENV["DOCCLOUD_EMBED_URL"] %>" "$http_origin";
        <% end %>
    }

    map $http_origin $cors_cred {
        default "";
        "<%= ENV["DOCCLOUD_URL"] %>" "true";
        <% if ENV["DOCCLOUD_URL"] != ENV["DOCCLOUD_EMBED_URL"] %>
          "<%= ENV["DOCCLOUD_EMBED_URL"] %>" "true";
        <% end %>
    }

    map $http_origin $cors_methods {
        default "";
        "<%= ENV["DOCCLOUD_URL"] %>" "DELETE, GET, OPTIONS, PATCH, POST, PUT";
        <% if ENV["DOCCLOUD_URL"] != ENV["DOCCLOUD_EMBED_URL"] %>
          "<%= ENV["DOCCLOUD_EMBED_URL"] %>" "DELETE, GET, OPTIONS, PATCH, POST, PUT";
        <% end %>
    }

    map $http_origin $cors_headers {
        default "";
        "<%= ENV["DOCCLOUD_URL"] %>" "accept, accept-encoding, authorization, content-type, dnt, origin, user-agent, x-csrftoken, x-requested-with";
        <% if ENV["DOCCLOUD_URL"] != ENV["DOCCLOUD_EMBED_URL"] %>
          "<%= ENV["DOCCLOUD_EMBED_URL"] %>" "accept, accept-encoding, authorization, content-type, dnt, origin, user-agent, x-csrftoken, x-requested-with";
        <% end %>
    }

    map $http_origin $cors_max_age {
        default "";
        "<%= ENV["DOCCLOUD_URL"] %>" "1728000";
        <% if ENV["DOCCLOUD_URL"] != ENV["DOCCLOUD_EMBED_URL"] %>
          "<%= ENV["DOCCLOUD_EMBED_URL"] %>" "1728000";
        <% end %>
    }

    server {

        listen <%= ENV["PORT"] %>;
        server_name _;
        keepalive_timeout 5;
        limit_req zone=one burst=20 nodelay;
        if ($http_host ~ "\.$" ){
            rewrite ^(.*) $scheme://$host$1 permanent;
        }

        location / {

            if ($request_method = 'OPTIONS' ) {
                add_header "Access-Control-Allow-Origin" $cors_origin_header always;
                add_header "Access-Control-Allow-Credentials" $cors_cred;
                add_header "Access-Control-Allow-Methods" $cors_methods;
                add_header "Access-Control-Allow-Headers" $cors_headers;
                add_header 'Access-Control-Max-Age' $cors_max_age;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            proxy_redirect off;
            proxy_pass http://app_server;
        }

    }

}
