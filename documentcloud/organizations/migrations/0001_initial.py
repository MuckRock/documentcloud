# Generated by Django 2.2.5 on 2019-09-17 17:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text='The user is currently working on behalf of this organization', verbose_name='active')),
                ('admin', models.BooleanField(default=False, help_text='The user is an administrator for this organization', verbose_name='admin')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='slug')),
                ('minimum_users', models.PositiveSmallIntegerField(default=1, help_text='The minimum number of users included with this plan', verbose_name='minimum users')),
                ('base_pages', models.PositiveSmallIntegerField(default=0, help_text='The number of monthly pages included by default with this plan', verbose_name='base pages')),
                ('pages_per_user', models.PositiveSmallIntegerField(default=0, help_text='The number of additional pages per month included with this plan for each user over the minimum', verbose_name='pages per user')),
                ('feature_level', models.PositiveSmallIntegerField(default=0, help_text='The level of premium features included with this plan', verbose_name='feature level')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text="Unique ID to link organizations across MuckRock's sites", unique=True, verbose_name='UUID')),
                ('name', models.CharField(help_text='Name of the organization', max_length=255, verbose_name='name')),
                ('slug', models.SlugField(help_text='Unique slug for the organization which may be used in a URL', max_length=255, unique=True, verbose_name='slug')),
                ('private', models.BooleanField(default=False, help_text='Whether or not to keep this organization and its membership list private', verbose_name='private')),
                ('individual', models.BooleanField(default=True, help_text='Is this an organization for an individual user?', verbose_name='individual')),
                ('card', models.CharField(blank=True, help_text='The brand and last 4 digits of the default credit card on file for this organization, for display purposes', max_length=255, verbose_name='card')),
                ('avatar_url', models.URLField(blank=True, help_text='A URL which points to an avatar for the organization', max_length=255, verbose_name='avatar url')),
                ('pages_per_month', models.IntegerField(default=0, help_text='How many monthly pages this organization gets each month', verbose_name='pages per month')),
                ('monthly_pages', models.IntegerField(default=0, help_text='How many recurring monthly pages are left for this month - these do not roll over and are just reset to `pages_per_month` on `date_update`', verbose_name='monthly pages')),
                ('number_pages', models.IntegerField(default=0, help_text='How many individually purchased pages this organization has - these never expire and are unaffected by the monthly roll over', verbose_name='number pages')),
                ('date_update', models.DateField(help_text='The date when this organizations monthly pages will be refreshed', null=True, verbose_name='date update')),
                ('payment_failed', models.BooleanField(default=False, help_text='This organizations payment method has failed and should be updated', verbose_name='payment failed')),
                ('plan', models.ForeignKey(help_text='The subscription type for this organization', null=True, on_delete=django.db.models.deletion.PROTECT, to='organizations.Plan', verbose_name='plan')),
                ('users', models.ManyToManyField(help_text='The users who are members of this organization', related_name='organizations', through='organizations.Membership', to=settings.AUTH_USER_MODEL, verbose_name='users')),
            ],
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(help_text='An organization being linked to a user', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='organizations.Organization', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='user',
            field=models.ForeignKey(help_text='A user being linked to an organization', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AlterUniqueTogether(
            name='membership',
            unique_together={('user', 'organization')},
        ),
    ]
