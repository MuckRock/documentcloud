<?xml version="1.0" encoding="UTF-8" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
For more details about configurations options that may appear in
this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
  <!-- In all configuration below, a prefix of "solr." for class names
  is an alias that causes solr to search appropriate packages,
  including org.apache.solr.(search|update|request|core|analysis)

  You may also specify a fully qualified Java classname if you
  have your own custom plugins.
  -->

  <!-- Controls what version of Lucene various components of Solr
  adhere to.  Generally, you want to use the latest version to
  get all bug fixes and improvements. It is highly recommended
  that you fully re-index after changing this setting as it can
  affect both how text is indexed and queried.
  -->
  <luceneMatchVersion>8.1.1</luceneMatchVersion>

  <!-- <lib/> directives can be used to instruct Solr to load any Jars
  identified and use them to resolve any "plugins" specified in
  your solrconfig.xml or schema.xml (ie: Analyzers, Request
  Handlers, etc...).

  All directories and paths are resolved relative to the
  instanceDir.

  Please note that <lib/> directives are processed in the order
  that they appear in your solrconfig.xml file, and are "stacked"
  on top of each other when building a ClassLoader - so if you have
  plugin jars with dependencies on other jars, the "lower level"
  dependency jars should be loaded first.

  If a "./lib" directory exists in your instanceDir, all files
  found in it are included as if you had used the following
  syntax...

  <lib dir="./lib" />
  -->

  <!-- A 'dir' option by itself adds any files found in the directory
  to the classpath, this is useful for including all jars in a
  directory.

  When a 'regex' is specified in addition to a 'dir', only the
  files in that directory which completely match the regex
  (anchored on both ends) will be included.

  If a 'dir' option (with or without a regex) is used and nothing
  is found that matches, a warning will be logged.

  The examples below can be used to load some solr-contribs along
  with their external dependencies.
  -->
  <lib dir="${solr.install.dir:../../../..}/contrib/extraction/lib" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-cell-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/clustering/lib/" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-clustering-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/velocity/lib" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-velocity-\d.*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-ltr-\d.*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/lib" regex=".*\.jar" />

  <!-- an exact 'path' can be used instead of a 'dir' to specify a
  specific jar file.  This will cause a serious error to be logged
  if it can't be loaded.
  -->
  <!--
  <lib path="../a-jar-that-does-not-exist.jar" />
  -->

  <!-- Data Directory

  Used to specify an alternate directory to hold all index data
  other than the default ./data under the Solr home.  If
  replication is in use, this should match the replication
  configuration.
  -->
  <dataDir>${solr.data.dir:}</dataDir>


  <!-- The DirectoryFactory to use for indexes.

  solr.StandardDirectoryFactory is filesystem
  based and tries to pick the best implementation for the current
  JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
  wraps solr.StandardDirectoryFactory and caches small files in memory
  for better NRT performance.

  One can force a particular implementation via solr.MMapDirectoryFactory,
  solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

  solr.RAMDirectoryFactory is memory based and not persistent.
  -->
  <directoryFactory name="DirectoryFactory"
    class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

  <!-- The CodecFactory for defining the format of the inverted index.
  The default implementation is SchemaCodecFactory, which is the official Lucene
  index format, but hooks into the schema to provide per-field customization of
  the postings lists and per-document values in the fieldType element
  (postingsFormat/docValuesFormat). Note that most of the alternative implementations
  are experimental, so if you choose to customize the index format, it's a good
  idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
  before upgrading to a newer version to avoid unnecessary reindexing.
  A "compressionMode" string element can be added to <codecFactory> to choose
    between the existing compression modes in the default codec: "BEST_SPEED" (default)
    or "BEST_COMPRESSION".
    -->
    <codecFactory class="solr.SchemaCodecFactory"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Index Config - These settings control low-level behavior of indexing
    Most example settings here show the default value, but are commented
    out, to more easily see where customizations have been made.

    Note: This replaces <indexDefaults> and <mainIndex> from older versions
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <indexConfig>
          <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
          LimitTokenCountFilterFactory in your fieldType definition. E.g.
          <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
          -->
          <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
          <!-- <writeLockTimeout>1000</writeLockTimeout>  -->

          <!-- Expert: Enabling compound file will use less files for the index,
          using fewer file descriptors on the expense of performance decrease.
          Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
          <!-- <useCompoundFile>false</useCompoundFile> -->

          <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
          indexing for buffering added documents and deletions before they are
          flushed to the Directory.
          maxBufferedDocs sets a limit on the number of documents buffered
          before flushing.
          If both ramBufferSizeMB and maxBufferedDocs is set, then
          Lucene will flush based on whichever limit is hit first.  -->
          <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
          <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

          <!-- Expert: Merge Policy
          The Merge Policy in Lucene controls how merging of segments is done.
          The default since Solr/Lucene 3.3 is TieredMergePolicy.
          The default since Lucene 2.3 was the LogByteSizeMergePolicy,
          Even older versions of Lucene used LogDocMergePolicy.
          -->
          <!--
          <mergePolicyFactory class="org.apache.solr.index.TieredMergePolicyFactory">
            <int name="maxMergeAtOnce">10</int>
            <int name="segmentsPerTier">10</int>
            <double name="noCFSRatio">0.1</double>
          </mergePolicyFactory>
          -->

          <!-- Expert: Merge Scheduler
          The Merge Scheduler in Lucene controls how merges are
          performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
          can perform merges in the background using separate threads.
          The SerialMergeScheduler (Lucene 2.2 default) does not.
          -->
          <!--
          <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
          -->

          <!-- LockFactory

          This option specifies which Lucene LockFactory implementation
          to use.

          single = SingleInstanceLockFactory - suggested for a
          read-only index or when there is no possibility of
          another process trying to modify the index.
          native = NativeFSLockFactory - uses OS native file locking.
          Do not use when multiple solr webapps in the same
          JVM are attempting to share a single index.
          simple = SimpleFSLockFactory  - uses a plain file for locking

          Defaults: 'native' is default for Solr3.6 and later, otherwise
          'simple' is the default

          More details on the nuances of each LockFactory...
          http://wiki.apache.org/lucene-java/AvailableLockFactories
          -->
          <lockType>${solr.lock.type:native}</lockType>

          <!-- Commit Deletion Policy
          Custom deletion policies can be specified here. The class must
          implement org.apache.lucene.index.IndexDeletionPolicy.

          The default Solr IndexDeletionPolicy implementation supports
          deleting index commit points on number of commits, age of
          commit point and optimized status.

          The latest commit point should always be preserved regardless
          of the criteria.
          -->
          <!--
          <deletionPolicy class="solr.SolrDeletionPolicy">
            -->
            <!-- The number of commit points to be kept -->
            <!-- <str name="maxCommitsToKeep">1</str> -->
            <!-- The number of optimized commit points to be kept -->
            <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
            <!--
            Delete all commit points once they have reached the given age.
            Supports DateMathParser syntax e.g.
            -->
            <!--
            <str name="maxCommitAge">30MINUTES</str>
            <str name="maxCommitAge">1DAY</str>
            -->
            <!--
          </deletionPolicy>
          -->

          <!-- Lucene Infostream

          To aid in advanced debugging, Lucene provides an "InfoStream"
          of detailed information when indexing.

          Setting The value to true will instruct the underlying Lucene
          IndexWriter to write its debugging info the specified file
          -->
          <!-- <infoStream file="INFOSTREAM.txt">false</infoStream> -->
        </indexConfig>


        <!-- JMX

        This example enables JMX if and only if an existing MBeanServer
        is found, use this if you want to configure JMX through JVM
        parameters. Remove this to disable exposing Solr configuration
        and statistics to JMX.

        For more details see http://wiki.apache.org/solr/SolrJmx
        -->
        <jmx />
        <!-- If you want to connect to a particular server, specify the
        agentId
        -->
        <!-- <jmx agentId="myAgent" /> -->
        <!-- If you want to start a new MBeanServer, specify the serviceUrl -->
        <!-- <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>
        -->

        <!-- The default high-performance update handler -->
        <updateHandler class="solr.DirectUpdateHandler2">

          <!-- Enables a transaction log, used for real-time get, durability, and
          and solr cloud replica recovery.  The log can grow as big as
          uncommitted changes to the index, so use of a hard autoCommit
          is recommended (see below).
          "dir" - the target directory for transaction logs, defaults to the
          solr data directory.
          "numVersionBuckets" - sets the number of buckets used to keep
          track of max version values when checking for re-ordered
          updates; increase this value to reduce the cost of
          synchronizing access to version buckets during high-volume
          indexing, this requires 8 bytes (long) * numVersionBuckets
          of heap space per Solr core.
          -->
          <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
            <int name="numVersionBuckets">${solr.ulog.numVersionBuckets:65536}</int>
          </updateLog>

          <!-- AutoCommit

          Perform a hard commit automatically under certain conditions.
          Instead of enabling autoCommit, consider using "commitWithin"
          when adding documents.

          http://wiki.apache.org/solr/UpdateXmlMessages

          maxDocs - Maximum number of documents to add since the last
          commit before automatically triggering a new commit.

          maxTime - Maximum amount of time in ms that is allowed to pass
          since a document was added before automatically
          triggering a new commit.
          openSearcher - if false, the commit causes recent index changes
          to be flushed to stable storage, but does not cause a new
          searcher to be opened to make those changes visible.

          If the updateLog is enabled, then it's highly recommended to
          have some sort of hard autoCommit to limit the log size.
          -->
          <autoCommit>
            <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
            <openSearcher>false</openSearcher>
          </autoCommit>

          <!-- softAutoCommit is like autoCommit except it causes a
          'soft' commit which only ensures that changes are visible
          but does not ensure that data is synced to disk.  This is
          faster and more near-realtime friendly than a hard commit.
          -->

          <autoSoftCommit>
            <maxTime>${solr.autoSoftCommit.maxTime:2000}</maxTime>
          </autoSoftCommit>

          <!-- Update Related Event Listeners

          Various IndexWriter related events can trigger Listeners to
          take actions.

          postCommit - fired after every commit or optimize command
          postOptimize - fired after every optimize command
          -->

        </updateHandler>

        <!-- IndexReaderFactory

        Use the following format to specify a custom IndexReaderFactory,
        which allows for alternate IndexReader implementations.

        ** Experimental Feature **

        Please note - Using a custom IndexReaderFactory may prevent
        certain other features from working. The API to
        IndexReaderFactory may change without warning or may even be
        removed from future releases if the problems cannot be
        resolved.


        ** Features that may not work with custom IndexReaderFactory **

        The ReplicationHandler assumes a disk-resident index. Using a
        custom IndexReader implementation may cause incompatibility
        with ReplicationHandler and may cause replication to not work
        correctly. See SOLR-1366 for details.

        -->
        <!--
        <indexReaderFactory name="IndexReaderFactory" class="package.class">
          <str name="someArg">Some Value</str>
        </indexReaderFactory >
        -->

        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Query section - these settings control query time things like caches
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <query>

          <!-- Maximum number of clauses allowed when parsing a boolean query string.

          This limit only impacts boolean queries specified by a user as part of a query string,
          and provides per-collection controls on how complex user specified boolean queries can
          be.  Query strings that specify more clauses then this will result in an error.

          If this per-collection limit is greater then the global `maxBooleanClauses` limit
          specified in `solr.xml`, it will have no effect, as that setting also limits the size
          of user specified boolean queries.
          -->
          <maxBooleanClauses>${solr.max.booleanClauses:1024}</maxBooleanClauses>

          <!-- Solr Internal Query Caches

          There are two implementations of cache available for Solr,
          LRUCache, based on a synchronized LinkedHashMap, and
          FastLRUCache, based on a ConcurrentHashMap.

          FastLRUCache has faster gets and slower puts in single
          threaded operation and thus is generally faster than LRUCache
          when the hit ratio of the cache is high (> 75%), and may be
          faster under other scenarios on multi-cpu systems.
          -->

          <!-- Filter Cache

          Cache used by SolrIndexSearcher for filters (DocSets),
          unordered sets of *all* documents that match a query.  When a
          new searcher is opened, its caches may be prepopulated or
          "autowarmed" using data from caches in the old searcher.
          autowarmCount is the number of items to prepopulate.  For
          LRUCache, the autowarmed items will be the most recently
          accessed items.

          Parameters:
          class - the SolrCache implementation LRUCache or
          (LRUCache or FastLRUCache)
          size - the maximum number of entries in the cache
          initialSize - the initial capacity (number of entries) of
          the cache.  (see java.util.HashMap)
          autowarmCount - the number of entries to prepopulate from
          and old cache.
          maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
          to occupy. Note that when this option is specified, the size
          and initialSize parameters are ignored.
          -->
          <filterCache class="solr.FastLRUCache"
            size="512"
            initialSize="512"
            autowarmCount="0"/>

          <!-- Query Result Cache

          Caches results of searches - ordered lists of document ids
          (DocList) based on a query, a sort, and the range of documents requested.
          Additional supported parameter by LRUCache:
          maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
          to occupy
          -->
          <queryResultCache class="solr.LRUCache"
            size="512"
            initialSize="512"
            autowarmCount="0"/>

          <!-- Document Cache

          Caches Lucene Document objects (the stored fields for each
          document).  Since Lucene internal document ids are transient,
          this cache will not be autowarmed.
          -->
          <documentCache class="solr.LRUCache"
            size="512"
            initialSize="512"
            autowarmCount="0"/>

          <!-- custom cache currently used by block join -->
          <cache name="perSegFilter"
            class="solr.search.LRUCache"
            size="10"
            initialSize="0"
            autowarmCount="10"
            regenerator="solr.NoOpRegenerator" />

          <!-- Field Value Cache

          Cache used to hold field values that are quickly accessible
          by document id.  The fieldValueCache is created by default
          even if not configured here.
          -->
          <!--
          <fieldValueCache class="solr.FastLRUCache"
            size="512"
            autowarmCount="128"
            showItems="32" />
          -->

          <!-- Custom Cache

          Example of a generic cache.  These caches may be accessed by
          name through SolrIndexSearcher.getCache(),cacheLookup(), and
          cacheInsert().  The purpose is to enable easy caching of
          user/application level data.  The regenerator argument should
          be specified as an implementation of solr.CacheRegenerator
          if autowarming is desired.
          -->
          <!--
          <cache name="myUserCache"
            class="solr.LRUCache"
            size="4096"
            initialSize="1024"
            autowarmCount="1024"
            regenerator="com.mycompany.MyRegenerator"
            />
          -->


          <!-- Lazy Field Loading

          If true, stored fields that are not requested will be loaded
          lazily.  This can result in a significant speed improvement
          if the usual case is to not load all stored fields,
          especially if the skipped fields are large compressed text
          fields.
          -->
          <enableLazyFieldLoading>true</enableLazyFieldLoading>

          <!-- Use Filter For Sorted Query

          A possible optimization that attempts to use a filter to
          satisfy a search.  If the requested sort does not include
          score, then the filterCache will be checked for a filter
          matching the query. If found, the filter will be used as the
          source of document ids, and then the sort will be applied to
          that.

          For most situations, this will not be useful unless you
          frequently get the same search repeatedly with different sort
          options, and none of them ever use "score"
          -->
          <!--
          <useFilterForSortedQuery>true</useFilterForSortedQuery>
          -->

          <!-- Result Window Size

          An optimization for use with the queryResultCache.  When a search
          is requested, a superset of the requested number of document ids
          are collected.  For example, if a search for a particular query
          requests matching documents 10 through 19, and queryWindowSize is 50,
          then documents 0 through 49 will be collected and cached.  Any further
          requests in that range can be satisfied via the cache.
          -->
          <queryResultWindowSize>20</queryResultWindowSize>

          <!-- Maximum number of documents to cache for any entry in the
          queryResultCache.
          -->
          <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

          <!-- Query Related Event Listeners

          Various IndexSearcher related events can trigger Listeners to
          take actions.

          newSearcher - fired whenever a new searcher is being prepared
          and there is a current searcher handling requests (aka
          registered).  It can be used to prime certain caches to
          prevent long request times for certain requests.

          firstSearcher - fired whenever a new searcher is being
          prepared but there is no current registered searcher to handle
          requests or to gain autowarming data from.


          -->
          <!-- QuerySenderListener takes an array of NamedList and executes a
          local query request for each NamedList in sequence.
          -->
          <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
              <!--
              <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
              <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
              -->
            </arr>
          </listener>
          <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
              <!--
              <lst>
                <str name="q">static firstSearcher warming in solrconfig.xml</str>
              </lst>
              -->
            </arr>
          </listener>

          <!-- Use Cold Searcher

          If a search request comes in and there is no current
          registered searcher, then immediately register the still
          warming searcher and use it.  If "false" then all requests
          will block until the first searcher is done warming.
          -->
          <useColdSearcher>false</useColdSearcher>

        </query>


        <!-- Request Dispatcher

        This section contains instructions for how the SolrDispatchFilter
        should behave when processing requests for this SolrCore.

        -->
        <requestDispatcher>
          <!-- Request Parsing

          These settings indicate how Solr Requests may be parsed, and
          what restrictions may be placed on the ContentStreams from
          those requests

          enableRemoteStreaming - enables use of the stream.file
          and stream.url parameters for specifying remote streams.

          multipartUploadLimitInKB - specifies the max size (in KiB) of
          Multipart File Uploads that Solr will allow in a Request.

          formdataUploadLimitInKB - specifies the max size (in KiB) of
          form data (application/x-www-form-urlencoded) sent via
          POST. You can use POST to pass request parameters not
          fitting into the URL.

          addHttpRequestToContext - if set to true, it will instruct
          the requestParsers to include the original HttpServletRequest
          object in the context map of the SolrQueryRequest under the
          key "httpRequest". It will not be used by any of the existing
          Solr components, but may be useful when developing custom
          plugins.

          *** WARNING ***
          Before enabling remote streaming, you should make sure your
          system has authentication enabled.

          <requestParsers enableRemoteStreaming="false"
            multipartUploadLimitInKB="-1"
            formdataUploadLimitInKB="-1"
            addHttpRequestToContext="false"/>
          -->

          <!-- HTTP Caching

          Set HTTP caching related parameters (for proxy caches and clients).

          The options below instruct Solr not to output any HTTP Caching
          related headers
          -->
          <httpCaching never304="true" />
          <!-- If you include a <cacheControl> directive, it will be used to
            generate a Cache-Control header (as well as an Expires header
            if the value contains "max-age=")

            By default, no Cache-Control header is generated.

            You can use the <cacheControl> option even if you have set
              never304="true"
              -->
              <!--
              <httpCaching never304="true" >
                <cacheControl>max-age=30, public</cacheControl>
              </httpCaching>
              -->
              <!-- To enable Solr to respond with automatically generated HTTP
              Caching headers, and to response to Cache Validation requests
              correctly, set the value of never304="false"

              This will cause Solr to generate Last-Modified and ETag
              headers based on the properties of the Index.

              The following options can also be specified to affect the
              values of these headers...

              lastModFrom - the default value is "openTime" which means the
              Last-Modified value (and validation against If-Modified-Since
              requests) will all be relative to when the current Searcher
              was opened.  You can change it to lastModFrom="dirLastMod" if
              you want the value to exactly correspond to when the physical
              index was last modified.

              etagSeed="..." is an option you can change to force the ETag
              header (and validation against If-None-Match requests) to be
              different even if the index has not changed (ie: when making
              significant changes to your config file)

              (lastModifiedFrom and etagSeed are both ignored if you use
              the never304="true" option)
              -->
              <!--
              <httpCaching lastModifiedFrom="openTime"
                etagSeed="Solr">
                <cacheControl>max-age=30, public</cacheControl>
              </httpCaching>
              -->
            </requestDispatcher>

            <!-- Request Handlers

            http://wiki.apache.org/solr/SolrRequestHandler

            Incoming queries will be dispatched to a specific handler by name
            based on the path specified in the request.

            If a Request Handler is declared with startup="lazy", then it will
            not be initialized until the first request that uses it.

            -->
            <!-- SearchHandler

            http://wiki.apache.org/solr/SearchHandler

            For processing Search Queries, the primary Request Handler
            provided with Solr is "SearchHandler" It delegates to a sequent
            of SearchComponents (see below) and supports distributed
            queries across multiple shards
            -->

            <requestHandler name="/mainsearch" class="solr.SearchHandler">
              <lst name="defaults">
                <str name="echoParams">explicit</str>
                <int name="rows">10</int>
                <str name="defType">edismax</str>
                <str name="qf">title^10 source^10 description^5 doctext^1</str>
                <str name="hl">true</str>		
                <str name="hl.fl">
                  page_no_1
                  page_no_2
                  page_no_3
                  page_no_4
                  page_no_5
                  page_no_6
                  page_no_7
                  page_no_8
                  page_no_9
                  page_no_10
                  page_no_11
                  page_no_12
                  page_no_13
                  page_no_14
                  page_no_15
                  page_no_16
                  page_no_17
                  page_no_18
                  page_no_19
                  page_no_20
                  page_no_21
                  page_no_22
                  page_no_23
                  page_no_24
                  page_no_25
                  page_no_26
                  page_no_27
                  page_no_28
                  page_no_29
                  page_no_30
                  page_no_31
                  page_no_32
                  page_no_33
                  page_no_34
                  page_no_35
                  page_no_36
                  page_no_37
                  page_no_38
                  page_no_39
                  page_no_40
                  page_no_41
                  page_no_42
                  page_no_43
                  page_no_44
                  page_no_45
                  page_no_46
                  page_no_47
                  page_no_48
                  page_no_49
                  page_no_50
                  page_no_51
                  page_no_52
                  page_no_53
                  page_no_54
                  page_no_55
                  page_no_56
                  page_no_57
                  page_no_58
                  page_no_59
                  page_no_60
                  page_no_61
                  page_no_62
                  page_no_63
                  page_no_64
                  page_no_65
                  page_no_66
                  page_no_67
                  page_no_68
                  page_no_69
                  page_no_70
                  page_no_71
                  page_no_72
                  page_no_73
                  page_no_74
                  page_no_75
                  page_no_76
                  page_no_77
                  page_no_78
                  page_no_79
                  page_no_80
                  page_no_81
                  page_no_82
                  page_no_83
                  page_no_84
                  page_no_85
                  page_no_86
                  page_no_87
                  page_no_88
                  page_no_89
                  page_no_90
                  page_no_91
                  page_no_92
                  page_no_93
                  page_no_94
                  page_no_95
                  page_no_96
                  page_no_97
                  page_no_98
                  page_no_99
                  page_no_100
                  page_no_101
                  page_no_102
                  page_no_103
                  page_no_104
                  page_no_105
                  page_no_106
                  page_no_107
                  page_no_108
                  page_no_109
                  page_no_110
                  page_no_111
                  page_no_112
                  page_no_113
                  page_no_114
                  page_no_115
                  page_no_116
                  page_no_117
                  page_no_118
                  page_no_119
                  page_no_120
                  page_no_121
                  page_no_122
                  page_no_123
                  page_no_124
                  page_no_125
                  page_no_126
                  page_no_127
                  page_no_128
                  page_no_129
                  page_no_130
                  page_no_131
                  page_no_132
                  page_no_133
                  page_no_134
                  page_no_135
                  page_no_136
                  page_no_137
                  page_no_138
                  page_no_139
                  page_no_140
                  page_no_141
                  page_no_142
                  page_no_143
                  page_no_144
                  page_no_145
                  page_no_146
                  page_no_147
                  page_no_148
                  page_no_149
                  page_no_150
                  page_no_151
                  page_no_152
                  page_no_153
                  page_no_154
                  page_no_155
                  page_no_156
                  page_no_157
                  page_no_158
                  page_no_159
                  page_no_160
                  page_no_161
                  page_no_162
                  page_no_163
                  page_no_164
                  page_no_165
                  page_no_166
                  page_no_167
                  page_no_168
                  page_no_169
                  page_no_170
                  page_no_171
                  page_no_172
                  page_no_173
                  page_no_174
                  page_no_175
                  page_no_176
                  page_no_177
                  page_no_178
                  page_no_179
                  page_no_180
                  page_no_181
                  page_no_182
                  page_no_183
                  page_no_184
                  page_no_185
                  page_no_186
                  page_no_187
                  page_no_188
                  page_no_189
                  page_no_190
                  page_no_191
                  page_no_192
                  page_no_193
                  page_no_194
                  page_no_195
                  page_no_196
                  page_no_197
                  page_no_198
                  page_no_199
                  page_no_200
                  page_no_201
                  page_no_202
                  page_no_203
                  page_no_204
                  page_no_205
                  page_no_206
                  page_no_207
                  page_no_208
                  page_no_209
                  page_no_210
                  page_no_211
                  page_no_212
                  page_no_213
                  page_no_214
                  page_no_215
                  page_no_216
                  page_no_217
                  page_no_218
                  page_no_219
                  page_no_220
                  page_no_221
                  page_no_222
                  page_no_223
                  page_no_224
                  page_no_225
                  page_no_226
                  page_no_227
                  page_no_228
                  page_no_229
                  page_no_230
                  page_no_231
                  page_no_232
                  page_no_233
                  page_no_234
                  page_no_235
                  page_no_236
                  page_no_237
                  page_no_238
                  page_no_239
                  page_no_240
                  page_no_241
                  page_no_242
                  page_no_243
                  page_no_244
                  page_no_245
                  page_no_246
                  page_no_247
                  page_no_248
                  page_no_249
                  page_no_250
                  page_no_251
                  page_no_252
                  page_no_253
                  page_no_254
                  page_no_255
                  page_no_256
                  page_no_257
                  page_no_258
                  page_no_259
                  page_no_260
                  page_no_261
                  page_no_262
                  page_no_263
                  page_no_264
                  page_no_265
                  page_no_266
                  page_no_267
                  page_no_268
                  page_no_269
                  page_no_270
                  page_no_271
                  page_no_272
                  page_no_273
                  page_no_274
                  page_no_275
                  page_no_276
                  page_no_277
                  page_no_278
                  page_no_279
                  page_no_280
                  page_no_281
                  page_no_282
                  page_no_283
                  page_no_284
                  page_no_285
                  page_no_286
                  page_no_287
                  page_no_288
                  page_no_289
                  page_no_290
                  page_no_291
                  page_no_292
                  page_no_293
                  page_no_294
                  page_no_295
                  page_no_296
                  page_no_297
                  page_no_298
                  page_no_299
                  page_no_300
                  page_no_301
                  page_no_302
                  page_no_303
                  page_no_304
                  page_no_305
                  page_no_306
                  page_no_307
                  page_no_308
                  page_no_309
                  page_no_310
                  page_no_311
                  page_no_312
                  page_no_313
                  page_no_314
                  page_no_315
                  page_no_316
                  page_no_317
                  page_no_318
                  page_no_319
                  page_no_320
                  page_no_321
                  page_no_322
                  page_no_323
                  page_no_324
                  page_no_325
                  page_no_326
                  page_no_327
                  page_no_328
                  page_no_329
                  page_no_330
                  page_no_331
                  page_no_332
                  page_no_333
                  page_no_334
                  page_no_335
                  page_no_336
                  page_no_337
                  page_no_338
                  page_no_339
                  page_no_340
                  page_no_341
                  page_no_342
                  page_no_343
                  page_no_344
                  page_no_345
                  page_no_346
                  page_no_347
                  page_no_348
                  page_no_349
                  page_no_350
                  page_no_351
                  page_no_352
                  page_no_353
                  page_no_354
                  page_no_355
                  page_no_356
                  page_no_357
                  page_no_358
                  page_no_359
                  page_no_360
                  page_no_361
                  page_no_362
                  page_no_363
                  page_no_364
                  page_no_365
                  page_no_366
                  page_no_367
                  page_no_368
                  page_no_369
                  page_no_370
                  page_no_371
                  page_no_372
                  page_no_373
                  page_no_374
                  page_no_375
                  page_no_376
                  page_no_377
                  page_no_378
                  page_no_379
                  page_no_380
                  page_no_381
                  page_no_382
                  page_no_383
                  page_no_384
                  page_no_385
                  page_no_386
                  page_no_387
                  page_no_388
                  page_no_389
                  page_no_390
                  page_no_391
                  page_no_392
                  page_no_393
                  page_no_394
                  page_no_395
                  page_no_396
                  page_no_397
                  page_no_398
                  page_no_399
                  page_no_400
                  page_no_401
                  page_no_402
                  page_no_403
                  page_no_404
                  page_no_405
                  page_no_406
                  page_no_407
                  page_no_408
                  page_no_409
                  page_no_410
                  page_no_411
                  page_no_412
                  page_no_413
                  page_no_414
                  page_no_415
                  page_no_416
                  page_no_417
                  page_no_418
                  page_no_419
                  page_no_420
                  page_no_421
                  page_no_422
                  page_no_423
                  page_no_424
                  page_no_425
                  page_no_426
                  page_no_427
                  page_no_428
                  page_no_429
                  page_no_430
                  page_no_431
                  page_no_432
                  page_no_433
                  page_no_434
                  page_no_435
                  page_no_436
                  page_no_437
                  page_no_438
                  page_no_439
                  page_no_440
                  page_no_441
                  page_no_442
                  page_no_443
                  page_no_444
                  page_no_445
                  page_no_446
                  page_no_447
                  page_no_448
                  page_no_449
                  page_no_450
                  page_no_451
                  page_no_452
                  page_no_453
                  page_no_454
                  page_no_455
                  page_no_456
                  page_no_457
                  page_no_458
                  page_no_459
                  page_no_460
                  page_no_461
                  page_no_462
                  page_no_463
                  page_no_464
                  page_no_465
                  page_no_466
                  page_no_467
                  page_no_468
                  page_no_469
                  page_no_470
                  page_no_471
                  page_no_472
                  page_no_473
                  page_no_474
                  page_no_475
                  page_no_476
                  page_no_477
                  page_no_478
                  page_no_479
                  page_no_480
                  page_no_481
                  page_no_482
                  page_no_483
                  page_no_484
                  page_no_485
                  page_no_486
                  page_no_487
                  page_no_488
                  page_no_489
                  page_no_490
                  page_no_491
                  page_no_492
                  page_no_493
                  page_no_494
                  page_no_495
                  page_no_496
                  page_no_497
                  page_no_498
                  page_no_499
                  page_no_500
                  page_no_501
                  page_no_502
                  page_no_503
                  page_no_504
                  page_no_505
                  page_no_506
                  page_no_507
                  page_no_508
                  page_no_509
                  page_no_510
                  page_no_511
                  page_no_512
                  page_no_513
                  page_no_514
                  page_no_515
                  page_no_516
                  page_no_517
                  page_no_518
                  page_no_519
                  page_no_520
                  page_no_521
                  page_no_522
                  page_no_523
                  page_no_524
                  page_no_525
                  page_no_526
                  page_no_527
                  page_no_528
                  page_no_529
                  page_no_530
                  page_no_531
                  page_no_532
                  page_no_533
                  page_no_534
                  page_no_535
                  page_no_536
                  page_no_537
                  page_no_538
                  page_no_539
                  page_no_540
                  page_no_541
                  page_no_542
                  page_no_543
                  page_no_544
                  page_no_545
                  page_no_546
                  page_no_547
                  page_no_548
                  page_no_549
                  page_no_550
                  page_no_551
                  page_no_552
                  page_no_553
                  page_no_554
                  page_no_555
                  page_no_556
                  page_no_557
                  page_no_558
                  page_no_559
                  page_no_560
                  page_no_561
                  page_no_562
                  page_no_563
                  page_no_564
                  page_no_565
                  page_no_566
                  page_no_567
                  page_no_568
                  page_no_569
                  page_no_570
                  page_no_571
                  page_no_572
                  page_no_573
                  page_no_574
                  page_no_575
                  page_no_576
                  page_no_577
                  page_no_578
                  page_no_579
                  page_no_580
                  page_no_581
                  page_no_582
                  page_no_583
                  page_no_584
                  page_no_585
                  page_no_586
                  page_no_587
                  page_no_588
                  page_no_589
                  page_no_590
                  page_no_591
                  page_no_592
                  page_no_593
                  page_no_594
                  page_no_595
                  page_no_596
                  page_no_597
                  page_no_598
                  page_no_599
                  page_no_600
                  page_no_601
                  page_no_602
                  page_no_603
                  page_no_604
                  page_no_605
                  page_no_606
                  page_no_607
                  page_no_608
                  page_no_609
                  page_no_610
                  page_no_611
                  page_no_612
                  page_no_613
                  page_no_614
                  page_no_615
                  page_no_616
                  page_no_617
                  page_no_618
                  page_no_619
                  page_no_620
                  page_no_621
                  page_no_622
                  page_no_623
                  page_no_624
                  page_no_625
                  page_no_626
                  page_no_627
                  page_no_628
                  page_no_629
                  page_no_630
                  page_no_631
                  page_no_632
                  page_no_633
                  page_no_634
                  page_no_635
                  page_no_636
                  page_no_637
                  page_no_638
                  page_no_639
                  page_no_640
                  page_no_641
                  page_no_642
                  page_no_643
                  page_no_644
                  page_no_645
                  page_no_646
                  page_no_647
                  page_no_648
                  page_no_649
                  page_no_650
                  page_no_651
                  page_no_652
                  page_no_653
                  page_no_654
                  page_no_655
                  page_no_656
                  page_no_657
                  page_no_658
                  page_no_659
                  page_no_660
                  page_no_661
                  page_no_662
                  page_no_663
                  page_no_664
                  page_no_665
                  page_no_666
                  page_no_667
                  page_no_668
                  page_no_669
                  page_no_670
                  page_no_671
                  page_no_672
                  page_no_673
                  page_no_674
                  page_no_675
                  page_no_676
                  page_no_677
                  page_no_678
                  page_no_679
                  page_no_680
                  page_no_681
                  page_no_682
                  page_no_683
                  page_no_684
                  page_no_685
                  page_no_686
                  page_no_687
                  page_no_688
                  page_no_689
                  page_no_690
                  page_no_691
                  page_no_692
                  page_no_693
                  page_no_694
                  page_no_695
                  page_no_696
                  page_no_697
                  page_no_698
                  page_no_699
                  page_no_700
                  page_no_701
                  page_no_702
                  page_no_703
                  page_no_704
                  page_no_705
                  page_no_706
                  page_no_707
                  page_no_708
                  page_no_709
                  page_no_710
                  page_no_711
                  page_no_712
                  page_no_713
                  page_no_714
                  page_no_715
                  page_no_716
                  page_no_717
                  page_no_718
                  page_no_719
                  page_no_720
                  page_no_721
                  page_no_722
                  page_no_723
                  page_no_724
                  page_no_725
                  page_no_726
                  page_no_727
                  page_no_728
                  page_no_729
                  page_no_730
                  page_no_731
                  page_no_732
                  page_no_733
                  page_no_734
                  page_no_735
                  page_no_736
                  page_no_737
                  page_no_738
                  page_no_739
                  page_no_740
                  page_no_741
                  page_no_742
                  page_no_743
                  page_no_744
                  page_no_745
                  page_no_746
                  page_no_747
                  page_no_748
                  page_no_749
                  page_no_750
                  page_no_751
                  page_no_752
                  page_no_753
                  page_no_754
                  page_no_755
                  page_no_756
                  page_no_757
                  page_no_758
                  page_no_759
                  page_no_760
                  page_no_761
                  page_no_762
                  page_no_763
                  page_no_764
                  page_no_765
                  page_no_766
                  page_no_767
                  page_no_768
                  page_no_769
                  page_no_770
                  page_no_771
                  page_no_772
                  page_no_773
                  page_no_774
                  page_no_775
                  page_no_776
                  page_no_777
                  page_no_778
                  page_no_779
                  page_no_780
                  page_no_781
                  page_no_782
                  page_no_783
                  page_no_784
                  page_no_785
                  page_no_786
                  page_no_787
                  page_no_788
                  page_no_789
                  page_no_790
                  page_no_791
                  page_no_792
                  page_no_793
                  page_no_794
                  page_no_795
                  page_no_796
                  page_no_797
                  page_no_798
                  page_no_799
                  page_no_800
                  page_no_801
                  page_no_802
                  page_no_803
                  page_no_804
                  page_no_805
                  page_no_806
                  page_no_807
                  page_no_808
                  page_no_809
                  page_no_810
                  page_no_811
                  page_no_812
                  page_no_813
                  page_no_814
                  page_no_815
                  page_no_816
                  page_no_817
                  page_no_818
                  page_no_819
                  page_no_820
                  page_no_821
                  page_no_822
                  page_no_823
                  page_no_824
                  page_no_825
                  page_no_826
                  page_no_827
                  page_no_828
                  page_no_829
                  page_no_830
                  page_no_831
                  page_no_832
                  page_no_833
                  page_no_834
                  page_no_835
                  page_no_836
                  page_no_837
                  page_no_838
                  page_no_839
                  page_no_840
                  page_no_841
                  page_no_842
                  page_no_843
                  page_no_844
                  page_no_845
                  page_no_846
                  page_no_847
                  page_no_848
                  page_no_849
                  page_no_850
                  page_no_851
                  page_no_852
                  page_no_853
                  page_no_854
                  page_no_855
                  page_no_856
                  page_no_857
                  page_no_858
                  page_no_859
                  page_no_860
                  page_no_861
                  page_no_862
                  page_no_863
                  page_no_864
                  page_no_865
                  page_no_866
                  page_no_867
                  page_no_868
                  page_no_869
                  page_no_870
                  page_no_871
                  page_no_872
                  page_no_873
                  page_no_874
                  page_no_875
                  page_no_876
                  page_no_877
                  page_no_878
                  page_no_879
                  page_no_880
                  page_no_881
                  page_no_882
                  page_no_883
                  page_no_884
                  page_no_885
                  page_no_886
                  page_no_887
                  page_no_888
                  page_no_889
                  page_no_890
                  page_no_891
                  page_no_892
                  page_no_893
                  page_no_894
                  page_no_895
                  page_no_896
                  page_no_897
                  page_no_898
                  page_no_899
                  page_no_900
                  page_no_901
                  page_no_902
                  page_no_903
                  page_no_904
                  page_no_905
                  page_no_906
                  page_no_907
                  page_no_908
                  page_no_909
                  page_no_910
                  page_no_911
                  page_no_912
                  page_no_913
                  page_no_914
                  page_no_915
                  page_no_916
                  page_no_917
                  page_no_918
                  page_no_919
                  page_no_920
                  page_no_921
                  page_no_922
                  page_no_923
                  page_no_924
                  page_no_925
                  page_no_926
                  page_no_927
                  page_no_928
                  page_no_929
                  page_no_930
                  page_no_931
                  page_no_932
                  page_no_933
                  page_no_934
                  page_no_935
                  page_no_936
                  page_no_937
                  page_no_938
                  page_no_939
                  page_no_940
                  page_no_941
                  page_no_942
                  page_no_943
                  page_no_944
                  page_no_945
                  page_no_946
                  page_no_947
                  page_no_948
                  page_no_949
                  page_no_950
                  page_no_951
                  page_no_952
                  page_no_953
                  page_no_954
                  page_no_955
                  page_no_956
                  page_no_957
                  page_no_958
                  page_no_959
                  page_no_960
                  page_no_961
                  page_no_962
                  page_no_963
                  page_no_964
                  page_no_965
                  page_no_966
                  page_no_967
                  page_no_968
                  page_no_969
                  page_no_970
                  page_no_971
                  page_no_972
                  page_no_973
                  page_no_974
                  page_no_975
                  page_no_976
                  page_no_977
                  page_no_978
                  page_no_979
                  page_no_980
                  page_no_981
                  page_no_982
                  page_no_983
                  page_no_984
                  page_no_985
                  page_no_986
                  page_no_987
                  page_no_988
                  page_no_989
                  page_no_990
                  page_no_991
                  page_no_992
                  page_no_993
                  page_no_994
                  page_no_995
                  page_no_996
                  page_no_997
                  page_no_998
                  page_no_999
                </str>
                <str name="hl.offsetSource">POSTINGS_WITH_TERM_VECTORS</str>
                <str name="hl.method">unified</str>		
                <str name="fl">
                  access
                  created_at
                  data_*
                  description
                  file_hash
                  id
                  language
                  organization
                  original_extension
                  page_count
                  projects
                  publish_at
                  published_url
                  related_article
                  slug
                  source
                  status
                  title
                  updated_at
                  user
                  noindex
                  edit_access:
                    or(
                      and(
                        or(
                          exists(query({!term f=user v=$qq_user})),
                          exists(query({!terms f=projects_edit_access v=$qq_projects}))
                        ),
                        exists(query({!terms f=access v=organization,private}))
                      ),
                      and(
                        exists(query({!terms f=organization v=$qq_organizations})),
                        exists(query({!terms f=access v=organization,public}))
                      )
                    )
                  notes:[subquery fromIndex=notes]
                  org_notes:[subquery fromIndex=notes]
                  content
                  page_number
                  x1
                  x2
                  y1
                  y2
                </str>
                <str name="notes.fl">
                  access
                  created_at
                  content:description
                  id
                  organization
                  page_number:page_count
                  title
                  updated_at
                  user
                  x1:x1_f
                  x2:x2_f
                  y1:y1_f
                  y2:y2_f
                </str>
                <str name="org_notes.fl">
                  access
                  created_at
                  content:description
                  id
                  organization
                  page_number:page_count
                  title
                  updated_at
                  user
                  x1:x1_f
                  x2:x2_f
                  y1:y1_f
                  y2:y2_f
                </str>
                <str name="notes.q">{!term f=document_s v=$row.id}</str>
                <str name="org_notes.q">{!term f=document_s v=$row.id}</str>
                <str name="notes.sort">page_count asc</str>
                <str name="org_notes.sort">page_count asc</str>
                <str name="qq_user">0</str>
                <str name="qq_projects"></str>
                <str name="qq_organizations"></str>
                <str name="notes.qq_user">0</str>
                <str name="uf">* -projects_edit_access</str>
              </lst>
              <lst name="appends">
                <!--
                <str name="fq">type:document</str>
                <str name="notes.fq">type:note</str>
                -->
                <str name="notes.fq">(access:public) OR {!term f=user v=$qq_user}</str>
                <!--
                <str name="org_notes.fq">type:note</str>
                -->
                <str name="org_notes.fq">access:organization</str>
              </lst>
              <arr name="last-components">
                <str>remove-empty-highlight-fields</str>
              </arr>
            </requestHandler>



            <requestHandler name="/select" class="solr.SearchHandler">
              <!-- default values for query parameters can be specified, these
              will be overridden by parameters in the request
              -->
              <lst name="defaults">
                <str name="echoParams">explicit</str>
                <int name="rows">10</int>
                <!-- Default search field
                <str name="df">text</str> 
                -->
                <!-- Change from JSON to XML format (the default prior to Solr 7.0)
                <str name="wt">xml</str> 
                -->
              </lst>
              <!-- In addition to defaults, "appends" params can be specified
              to identify values which should be appended to the list of
              multi-val params from the query (or the existing "defaults").
              -->
              <!-- In this example, the param "fq=instock:true" would be appended to
              any query time fq params the user may specify, as a mechanism for
              partitioning the index, independent of any user selected filtering
              that may also be desired (perhaps as a result of faceted searching).

              NOTE: there is *absolutely* nothing a client can do to prevent these
              "appends" values from being used, so don't use this mechanism
              unless you are sure you always want it.
              -->
              <!--
              <lst name="appends">
                <str name="fq">inStock:true</str>
              </lst>
              -->
              <!-- "invariants" are a way of letting the Solr maintainer lock down
              the options available to Solr clients.  Any params values
              specified here are used regardless of what values may be specified
              in either the query, the "defaults", or the "appends" params.

              In this example, the facet.field and facet.query params would
              be fixed, limiting the facets clients can use.  Faceting is
              not turned on by default - but if the client does specify
              facet=true in the request, these are the only facets they
              will be able to see counts for; regardless of what other
              facet.field or facet.query params they may specify.

              NOTE: there is *absolutely* nothing a client can do to prevent these
              "invariants" values from being used, so don't use this mechanism
              unless you are sure you always want it.
              -->
              <!--
              <lst name="invariants">
                <str name="facet.field">cat</str>
                <str name="facet.field">manu_exact</str>
                <str name="facet.query">price:[* TO 500]</str>
                <str name="facet.query">price:[500 TO *]</str>
              </lst>
              -->
              <!-- If the default list of SearchComponents is not desired, that
              list can either be overridden completely, or components can be
              prepended or appended to the default list.  (see below)
              -->
              <!--
              <arr name="components">
                <str>nameOfCustomComponent1</str>
                <str>nameOfCustomComponent2</str>
              </arr>
              -->
            </requestHandler>

            <requestHandler name="/docsearch" class="solr.SearchHandler">
              <lst name="defaults">
                <str name="echoParams">explicit</str>
                <int name="rows">10</int>
                <str name="defType">edismax</str>
                <str name="qf">title_t^10 source_t^10 description_t^5 text_t^1</str>
              </lst>
              <lst name="appends">
                <str name="fq">{!collapse field=document_id_i}</str>
              </lst>
            </requestHandler>

            <requestHandler name="/pagesearch" class="solr.SearchHandler">
              <lst name="defaults">
                <str name="echoParams">explicit</str>
                <int name="rows">10</int>
                <str name="defType">edismax</str>
                <str name="qf">text_t^10</str>
              </lst>
            </requestHandler>

            <!-- A request handler that returns indented JSON by default -->
            <requestHandler name="/query" class="solr.SearchHandler">
              <lst name="defaults">
                <str name="echoParams">explicit</str>
                <str name="wt">json</str>
                <str name="indent">true</str>
              </lst>
            </requestHandler>


            <!-- A Robust Example

            This example SearchHandler declaration shows off usage of the
            SearchHandler with many defaults declared

            Note that multiple instances of the same Request Handler
            (SearchHandler) can be registered multiple times with different
            names (and different init parameters)
            -->
            <requestHandler name="/browse" class="solr.SearchHandler" useParams="query,facets,velocity,browse">
              <lst name="defaults">
                <str name="echoParams">explicit</str>
              </lst>
            </requestHandler>

            <initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
              <lst name="defaults">
                <str name="df">_text_</str>
              </lst>
            </initParams>

            <!-- Solr Cell Update Request Handler

            http://wiki.apache.org/solr/ExtractingRequestHandler

            -->
            <requestHandler name="/update/extract"
              startup="lazy"
              class="solr.extraction.ExtractingRequestHandler" >
              <lst name="defaults">
                <str name="lowernames">true</str>
                <str name="fmap.content">_text_</str>
              </lst>
            </requestHandler>

            <!-- Search Components

            Search components are registered to SolrCore and used by
            instances of SearchHandler (which can access them by name)

            By default, the following components are available:

            <searchComponent name="query"     class="solr.QueryComponent" />
            <searchComponent name="facet"     class="solr.FacetComponent" />
            <searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
            <searchComponent name="highlight" class="solr.HighlightComponent" />
            <searchComponent name="stats"     class="solr.StatsComponent" />
            <searchComponent name="debug"     class="solr.DebugComponent" />

            Default configuration in a requestHandler would look like:

            <arr name="components">
              <str>query</str>
              <str>facet</str>
              <str>mlt</str>
              <str>highlight</str>
              <str>stats</str>
              <str>debug</str>
            </arr>

            If you register a searchComponent to one of the standard names,
            that will be used instead of the default.

            To insert components before or after the 'standard' components, use:

            <arr name="first-components">
              <str>myFirstComponentName</str>
            </arr>

            <arr name="last-components">
              <str>myLastComponentName</str>
            </arr>

            NOTE: The component registered with the name "debug" will
            always be executed after the "last-components"

            -->

            <searchComponent name="remove-empty-highlight-fields" 
              class="com.nextbrick.solr.component.RemoveEmptyHighlightFieldsComponent" />

            <!-- Spell Check

            The spell check component can return a list of alternative spelling
            suggestions.

            http://wiki.apache.org/solr/SpellCheckComponent
            -->
            <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

              <str name="queryAnalyzerFieldType">text_general</str>

              <!-- Multiple "Spell Checkers" can be declared and used by this
              component
              -->

              <!-- a spellchecker built from a field of the main index -->
              <lst name="spellchecker">
                <str name="name">default</str>
                <str name="field">_text_</str>
                <str name="classname">solr.DirectSolrSpellChecker</str>
                <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
                <str name="distanceMeasure">internal</str>
                <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
                <float name="accuracy">0.5</float>
                <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
                <int name="maxEdits">2</int>
                <!-- the minimum shared prefix when enumerating terms -->
                <int name="minPrefix">1</int>
                <!-- maximum number of inspections per result. -->
                <int name="maxInspections">5</int>
                <!-- minimum length of a query term to be considered for correction -->
                <int name="minQueryLength">4</int>
                <!-- maximum threshold of documents a query term can appear to be considered for correction -->
                <float name="maxQueryFrequency">0.01</float>
                <!-- uncomment this to require suggestions to occur in 1% of the documents
                <float name="thresholdTokenFrequency">.01</float>
                -->
              </lst>

              <!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
              <!--
              <lst name="spellchecker">
                <str name="name">wordbreak</str>
                <str name="classname">solr.WordBreakSolrSpellChecker</str>
                <str name="field">name</str>
                <str name="combineWords">true</str>
                <str name="breakWords">true</str>
                <int name="maxChanges">10</int>
              </lst>
              -->
            </searchComponent>

            <!-- A request handler for demonstrating the spellcheck component.

            NOTE: This is purely as an example.  The whole purpose of the
            SpellCheckComponent is to hook it into the request handler that
            handles your normal user queries so that a separate request is
            not needed to get suggestions.

            IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS
            NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!

            See http://wiki.apache.org/solr/SpellCheckComponent for details
            on the request parameters.
            -->
            <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
              <lst name="defaults">
                <!-- Solr will use suggestions from both the 'default' spellchecker
                and from the 'wordbreak' spellchecker and combine them.
                collations (re-written queries) can include a combination of
                corrections from both spellcheckers -->
                <str name="spellcheck.dictionary">default</str>
                <str name="spellcheck">on</str>
                <str name="spellcheck.extendedResults">true</str>
                <str name="spellcheck.count">10</str>
                <str name="spellcheck.alternativeTermCount">5</str>
                <str name="spellcheck.maxResultsForSuggest">5</str>
                <str name="spellcheck.collate">true</str>
                <str name="spellcheck.collateExtendedResults">true</str>
                <str name="spellcheck.maxCollationTries">10</str>
                <str name="spellcheck.maxCollations">5</str>
              </lst>
              <arr name="last-components">
                <str>spellcheck</str>
              </arr>
            </requestHandler>

            <!-- Term Vector Component

            http://wiki.apache.org/solr/TermVectorComponent
            -->
            <searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

            <!-- A request handler for demonstrating the term vector component

            This is purely as an example.

            In reality you will likely want to add the component to your
            already specified request handlers.
            -->
            <requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
              <lst name="defaults">
                <bool name="tv">true</bool>
              </lst>
              <arr name="last-components">
                <str>tvComponent</str>
              </arr>
            </requestHandler>

            <!-- Clustering Component. (Omitted here. See the default Solr example for a typical configuration.) -->

            <!-- Terms Component

            http://wiki.apache.org/solr/TermsComponent

            A component to return terms and document frequency of those
            terms
            -->
            <searchComponent name="terms" class="solr.TermsComponent"/>

            <!-- A request handler for demonstrating the terms component -->
            <requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
              <lst name="defaults">
                <bool name="terms">true</bool>
                <bool name="distrib">false</bool>
              </lst>
              <arr name="components">
                <str>terms</str>
              </arr>
            </requestHandler>


            <!-- Query Elevation Component

            http://wiki.apache.org/solr/QueryElevationComponent

            a search component that enables you to configure the top
            results for a given query regardless of the normal lucene
            scoring.
            -->
            <searchComponent name="elevator" class="solr.QueryElevationComponent" >
              <!-- pick a fieldType to analyze queries -->
              <str name="queryFieldType">string</str>
            </searchComponent>

            <!-- A request handler for demonstrating the elevator component -->
            <requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
              <lst name="defaults">
                <str name="echoParams">explicit</str>
              </lst>
              <arr name="last-components">
                <str>elevator</str>
              </arr>
            </requestHandler>

            <!-- Highlighting Component

            http://wiki.apache.org/solr/HighlightingParameters
            -->
            <searchComponent class="solr.HighlightComponent" name="highlight">
              <highlighting>
                <!-- Configure the standard fragmenter -->
                <!-- This could most likely be commented out in the "default" case -->
                <fragmenter name="gap"
                  default="true"
                  class="solr.highlight.GapFragmenter">
                  <lst name="defaults">
                    <int name="hl.fragsize">100</int>
                  </lst>
                </fragmenter>

                <!-- A regular-expression-based fragmenter
                (for sentence extraction)
                -->
                <fragmenter name="regex"
                  class="solr.highlight.RegexFragmenter">
                  <lst name="defaults">
                    <!-- slightly smaller fragsizes work better because of slop -->
                    <int name="hl.fragsize">70</int>
                    <!-- allow 50% slop on fragment sizes -->
                    <float name="hl.regex.slop">0.5</float>
                    <!-- a basic sentence pattern -->
                    <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
                  </lst>
                </fragmenter>

                <!-- Configure the standard formatter -->
                <formatter name="html"
                  default="true"
                  class="solr.highlight.HtmlFormatter">
                  <lst name="defaults">
                    <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                      <str name="hl.simple.post"><![CDATA[</em>]]></str>
                  </lst>
                </formatter>

                <!-- Configure the standard encoder -->
                <encoder name="html"
                  class="solr.highlight.HtmlEncoder" />

                <!-- Configure the standard fragListBuilder -->
                <fragListBuilder name="simple"
                  class="solr.highlight.SimpleFragListBuilder"/>

                <!-- Configure the single fragListBuilder -->
                <fragListBuilder name="single"
                  class="solr.highlight.SingleFragListBuilder"/>

                <!-- Configure the weighted fragListBuilder -->
                <fragListBuilder name="weighted"
                  default="true"
                  class="solr.highlight.WeightedFragListBuilder"/>

                <!-- default tag FragmentsBuilder -->
                <fragmentsBuilder name="default"
                  default="true"
                  class="solr.highlight.ScoreOrderFragmentsBuilder">
                  <!--
                  <lst name="defaults">
                    <str name="hl.multiValuedSeparatorChar">/</str>
                  </lst>
                  -->
                </fragmentsBuilder>

                <!-- multi-colored tag FragmentsBuilder -->
                <fragmentsBuilder name="colored"
                  class="solr.highlight.ScoreOrderFragmentsBuilder">
                  <lst name="defaults">
                    <str name="hl.tag.pre"><![CDATA[
                      <b style="background:yellow">,<b style="background:lawgreen">,
                          <b style="background:aquamarine">,<b style="background:magenta">,
                              <b style="background:palegreen">,<b style="background:coral">,
                                  <b style="background:wheat">,<b style="background:khaki">,
                                      <b style="background:lime">,<b style="background:deepskyblue">]]></str>
                                        <str name="hl.tag.post"><![CDATA[</b>]]></str>
                                    </lst>
                                  </fragmentsBuilder>

                                  <boundaryScanner name="default"
                                    default="true"
                                    class="solr.highlight.SimpleBoundaryScanner">
                                    <lst name="defaults">
                                      <str name="hl.bs.maxScan">10</str>
                                      <str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
                                    </lst>
                                  </boundaryScanner>

                                  <boundaryScanner name="breakIterator"
                                    class="solr.highlight.BreakIteratorBoundaryScanner">
                                    <lst name="defaults">
                                      <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
                                      <str name="hl.bs.type">WORD</str>
                                      <!-- language and country are used when constructing Locale object.  -->
                                      <!-- And the Locale object will be used when getting instance of BreakIterator -->
                                      <str name="hl.bs.language">en</str>
                                      <str name="hl.bs.country">US</str>
                                    </lst>
                                  </boundaryScanner>
                                </highlighting>
                              </searchComponent>

                              <!-- Update Processors

                              Chains of Update Processor Factories for dealing with Update
                              Requests can be declared, and then used by name in Update
                              Request Processors

                              http://wiki.apache.org/solr/UpdateRequestProcessor

                              -->

                              <!-- Add unknown fields to the schema

                              Field type guessing update processors that will
                              attempt to parse string-typed field values as Booleans, Longs,
                              Doubles, or Dates, and then add schema fields with the guessed
                              field types. Text content will be indexed as "text_general" as
                              well as a copy to a plain string version in *_str.

                              These require that the schema is both managed and mutable, by
                              declaring schemaFactory as ManagedIndexSchemaFactory, with
                              mutable specified as true.

                              See http://wiki.apache.org/solr/GuessingFieldTypes
                              -->
                              <updateProcessor class="solr.UUIDUpdateProcessorFactory" name="uuid"/>
                              <updateProcessor class="solr.RemoveBlankFieldUpdateProcessorFactory" name="remove-blank"/>
                              <updateProcessor class="solr.FieldNameMutatingUpdateProcessorFactory" name="field-name-mutating">
                                <str name="pattern">[^\w-\.]</str>
                                <str name="replacement">_</str>
                              </updateProcessor>
                              <updateProcessor class="solr.ParseBooleanFieldUpdateProcessorFactory" name="parse-boolean"/>
                              <updateProcessor class="solr.ParseLongFieldUpdateProcessorFactory" name="parse-long"/>
                              <updateProcessor class="solr.ParseDoubleFieldUpdateProcessorFactory" name="parse-double"/>
                              <updateProcessor class="solr.ParseDateFieldUpdateProcessorFactory" name="parse-date">
                                <arr name="format">
                                  <str>yyyy-MM-dd['T'[HH:mm[:ss[.SSS]][z</str>
                                  <str>yyyy-MM-dd['T'[HH:mm[:ss[,SSS]][z</str>
                                  <str>yyyy-MM-dd HH:mm[:ss[.SSS]][z</str>
                                  <str>yyyy-MM-dd HH:mm[:ss[,SSS]][z</str>
                                  <str>[EEE, ]dd MMM yyyy HH:mm[:ss] z</str>
                                  <str>EEEE, dd-MMM-yy HH:mm:ss z</str>
                                  <str>EEE MMM ppd HH:mm:ss [z ]yyyy</str>
                                </arr>
                              </updateProcessor>
                              <updateProcessor class="solr.AddSchemaFieldsUpdateProcessorFactory" name="add-schema-fields">
                                <lst name="typeMapping">
                                  <str name="valueClass">java.lang.String</str>
                                  <str name="fieldType">text_general</str>
                                  <lst name="copyField">
                                    <str name="dest">*_str</str>
                                    <int name="maxChars">256</int>
                                  </lst>
                                  <!-- Use as default mapping instead of defaultFieldType -->
                                  <bool name="default">true</bool>
                                </lst>
                                <lst name="typeMapping">
                                  <str name="valueClass">java.lang.Boolean</str>
                                  <str name="fieldType">booleans</str>
                                </lst>
                                <lst name="typeMapping">
                                  <str name="valueClass">java.util.Date</str>
                                  <str name="fieldType">pdates</str>
                                </lst>
                                <lst name="typeMapping">
                                  <str name="valueClass">java.lang.Long</str>
                                  <str name="valueClass">java.lang.Integer</str>
                                  <str name="fieldType">plongs</str>
                                </lst>
                                <lst name="typeMapping">
                                  <str name="valueClass">java.lang.Number</str>
                                  <str name="fieldType">pdoubles</str>
                                </lst>
                              </updateProcessor>

                              <!-- The update.autoCreateFields property can be turned to false to disable schemaless mode -->
                              <updateRequestProcessorChain name="add-unknown-fields-to-the-schema" default="${update.autoCreateFields:true}"
                                processor="uuid,remove-blank,field-name-mutating,parse-boolean,parse-long,parse-double,parse-date,add-schema-fields">
                                <processor class="solr.LogUpdateProcessorFactory"/>
                                <processor class="solr.DistributedUpdateProcessorFactory"/>
                                <processor class="solr.RunUpdateProcessorFactory"/>
                              </updateRequestProcessorChain>

                              <!-- Deduplication

                              An example dedup update processor that creates the "id" field
                              on the fly based on the hash code of some other fields.  This
                              example has overwriteDupes set to false since we are using the
                              id field as the signatureField and Solr will maintain
                              uniqueness based on that anyway.

                              -->
                              <!--
                              <updateRequestProcessorChain name="dedupe">
                                <processor class="solr.processor.SignatureUpdateProcessorFactory">
                                  <bool name="enabled">true</bool>
                                  <str name="signatureField">id</str>
                                  <bool name="overwriteDupes">false</bool>
                                  <str name="fields">name,features,cat</str>
                                  <str name="signatureClass">solr.processor.Lookup3Signature</str>
                                </processor>
                                <processor class="solr.LogUpdateProcessorFactory" />
                                <processor class="solr.RunUpdateProcessorFactory" />
                              </updateRequestProcessorChain>
                              -->

                              <!-- Language identification

                              This example update chain identifies the language of the incoming
                              documents using the langid contrib. The detected language is
                              written to field language_s. No field name mapping is done.
                              The fields used for detection are text, title, subject and description,
                              making this example suitable for detecting languages form full-text
                              rich documents injected via ExtractingRequestHandler.
                              See more about langId at http://wiki.apache.org/solr/LanguageDetection
                              -->
                              <!--
                              <updateRequestProcessorChain name="langid">
                                <processor class="org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory">
                                  <str name="langid.fl">text,title,subject,description</str>
                                  <str name="langid.langField">language_s</str>
                                  <str name="langid.fallback">en</str>
                                </processor>
                                <processor class="solr.LogUpdateProcessorFactory" />
                                <processor class="solr.RunUpdateProcessorFactory" />
                              </updateRequestProcessorChain>
                              -->

                              <!-- Script update processor

                              This example hooks in an update processor implemented using JavaScript.

                              See more about the script update processor at http://wiki.apache.org/solr/ScriptUpdateProcessor
                              -->
                              <!--
                              <updateRequestProcessorChain name="script">
                                <processor class="solr.StatelessScriptUpdateProcessorFactory">
                                  <str name="script">update-script.js</str>
                                  <lst name="params">
                                    <str name="config_param">example config parameter</str>
                                  </lst>
                                </processor>
                                <processor class="solr.RunUpdateProcessorFactory" />
                              </updateRequestProcessorChain>
                              -->

                              <!-- Response Writers

                              http://wiki.apache.org/solr/QueryResponseWriter

                              Request responses will be written using the writer specified by
                              the 'wt' request parameter matching the name of a registered
                              writer.

                              The "default" writer is the default and will be used if 'wt' is
                              not specified in the request.
                              -->
                              <!-- The following response writers are implicitly configured unless
                              overridden...
                              -->
                              <!--
                              <queryResponseWriter name="xml"
                                default="true"
                                class="solr.XMLResponseWriter" />
                              <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
                              <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
                              <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
                              <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
                              <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
                              <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
                              <queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
                              -->

                              <queryResponseWriter name="json" class="solr.JSONResponseWriter">
                                <!-- For the purposes of the tutorial, JSON responses are written as
                                plain text so that they are easy to read in *any* browser.
                                If you expect a MIME type of "application/json" just remove this override.
                                -->
                                <str name="content-type">text/plain; charset=UTF-8</str>
                              </queryResponseWriter>

                              <!--
                              Custom response writers can be declared as needed...
                              -->
                              <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy">
                                <str name="template.base.dir">${velocity.template.base.dir:}</str>
                                <str name="solr.resource.loader.enabled">${velocity.solr.resource.loader.enabled:true}</str>
                                <str name="params.resource.loader.enabled">${velocity.params.resource.loader.enabled:false}</str>
                              </queryResponseWriter>

                              <!-- XSLT response writer transforms the XML output by any xslt file found
                              in Solr's conf/xslt directory.  Changes to xslt files are checked for
                              every xsltCacheLifetimeSeconds.
                              -->
                              <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
                                <int name="xsltCacheLifetimeSeconds">5</int>
                              </queryResponseWriter>

                              <!-- Query Parsers

                              https://lucene.apache.org/solr/guide/query-syntax-and-parsing.html

                              Multiple QParserPlugins can be registered by name, and then
                              used in either the "defType" param for the QueryComponent (used
                              by SearchHandler) or in LocalParams
                              -->
                              <!-- example of registering a query parser -->
                              <!--
                              <queryParser name="myparser" class="com.mycompany.MyQParserPlugin"/>
                              -->

                              <!-- Function Parsers

                              http://wiki.apache.org/solr/FunctionQuery

                              Multiple ValueSourceParsers can be registered by name, and then
                              used as function names when using the "func" QParser.
                              -->
                              <!-- example of registering a custom function parser  -->
                              <!--
                              <valueSourceParser name="myfunc"
                                class="com.mycompany.MyValueSourceParser" />
                              -->


                              <!-- Document Transformers
                              http://wiki.apache.org/solr/DocTransformers
                              -->
                              <!--
                              Could be something like:
                              <transformer name="db" class="com.mycompany.LoadFromDatabaseTransformer" >
                                <int name="connection">jdbc://....</int>
                              </transformer>

                              To add a constant value to all docs, use:
                              <transformer name="mytrans2" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
                                <int name="value">5</int>
                              </transformer>

                              If you want the user to still be able to change it with _value:something_ use this:
                              <transformer name="mytrans3" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
                                <double name="defaultValue">5</double>
                              </transformer>

                              If you are using the QueryElevationComponent, you may wish to mark documents that get boosted.  The
                              EditorialMarkerFactory will do exactly that:
                              <transformer name="qecBooster" class="org.apache.solr.response.transform.EditorialMarkerFactory" />
                              -->
                            </config>
